{
  "swagger": "2.0",
  "info": {
    "description": "This documentation was created to help developers use the Covid 19 Sniffer Resource.\n## Brief Overview\n  The Covid-19 Sniffer platform is designed as a multi-tenent system which cuts across various regions. The system is structured in a way that data is abstracted from users depending on their access levels.\n### User Access Levels \n  The following access levels are applied throughout this platform and should be adhered to in the usage of API.\n\n- **ROOT:** This refers to the super admin who has access to all endpoints.\n\n- **COUNTRY ADMIN:** These are admin users who have access to data generated only by users registered within their country. These user may include members of a task force backed by the Federal Government, members of the country's CDC, etc.\n\n- **STATE ADMIN:** A state admin is assigned to any user who may belong to any of these categories:\n  - A State Governor/Mayor\n  - A member of a State Task force\n  - Any individual or organization backed by the state government.\n  \n  Users in this category are only able to view data which is generated by users registered in their state.\n  \n- **HEALTH ADMIN:** These are users who are high-ranking members of Staff of any health institution which is approved by the State Government to employ the use of the Covid-19 Sniffer Platform.\n\n- **ISOLATION ADMIN:** An Isolation Admin is any user who works at an Isolation Centre and has been approved by the Health Admin or any other high-level admin to make use of the platform.\n\n- **USER:** These are the end-users of the mobile application through which the system's actionable data is being generated from.",
    "version": "1.0.0",
    "title": "Covid-19 Sniffer",
    "contact": {
      "name": "Efull Technology Nigeria Limited",
      "url": "http://efulltech.com.ng",
      "email": "services@efulltech.com.ng"
    }
  },
  "host": "covid-19-sniffer-staging.herokuapp.com",
  "tags": [
    {
      "name": "Authentication",
      "description": ""
    },
    {
      "name": "User"
    },
    {
      "name": "Factory"
    },
    {
      "name": "Country"
    },
    {
      "name": "Hotspots"
    },
    {
      "name": "Visitations"
    },
    {
      "name": "Health Information"
    },
    {
      "name": "Health Codes"
    },
    {
      "name": "Contact Tracing"
    },
    {
      "name": "Flag"
    },
    {
      "name": "Notifications"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Admin Registers a new user",
        "description": "This should be used to add a new user to the platform by an admin.\nThis feature is not available to unauthrized users.",
        "operationId": "registerUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "description": "Bearer ${access_token}",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "dob": {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "description": "Gender can be either MALE or FEMALE"
                },
                "phone": {
                  "type": "string"
                },
                "profilePhotoUrl": {
                  "type": "string"
                },
                "stateOfResidence": {
                  "type": "string"
                },
                "organization": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "email",
                "password",
                "phone",
                "stateOfResidence",
                "organization"
              ]
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {
              "Authorization": {
                "type": "string",
                "description": "Access token received after login\n",
                "required": true
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login",
        "description": "User authentication which generates token",
        "operationId": "userLogin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "token": {
                  "type": "string",
                  "description": "access token which would be used in subsequent calls which require Authorization"
                },
                "user": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User"
          }
        }
      }
    },
    "/visitations/check-in": {
      "post": {
        "summary": "Check-in",
        "operationId": "post-visitation-check-in",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "This endpoint handles check in for every user. This should be called mostly when a user scans another user's QR code or makes use of the manual check-in feature.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "description": ""
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Visitation"
            },
            "description": ""
          }
        ],
        "tags": [
          "Visitations"
        ]
      },
      "parameters": []
    },
    "/users": {
      "get": {
        "summary": "User",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-users",
        "description": "Get all users\nThis feature is adaptive. This means that the response that is returned is based on the admin's permission and admin type. For example, a country admin will get a response which contains all users within their set country. Likewise, a state admin will get a response containing only users registered within their set state.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "description": "Bearer {token}",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to get values of sub-documents that are mapped to this model"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "This should be used when trying to fetch a list of documents. Use this to limit the number of items returned by the query. Default value is 10."
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "This is used for pagination. Use this parameter to instruct the endpoint to display values for page N"
          }
        ]
      }
    },
    "/users/{user_id}": {
      "parameters": [
        {
          "type": "string",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get User",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string"
                }
              }
            }
          },
          "": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": ""
          }
        },
        "operationId": "get-users-user_id",
        "description": "Fetch details of a single user",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Bearer {token}"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to get values of sub-documents that are mapped to this model"
          }
        ]
      },
      "patch": {
        "summary": "Update User",
        "operationId": "patch-users-user_id",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "This is used to update a single user's profile",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "description": "Bearer {token}",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "tags": [
          "User"
        ]
      },
      "delete": {
        "summary": "Delete User",
        "operationId": "delete-users-user_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete single user account",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/visitations/history": {
      "get": {
        "summary": "Get a list of visitations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Visitation"
              }
            },
            "examples": {
              "Example": {
                "visitations": [
                  {
                    "id": "5f03c434d0d6bf46556465f2",
                    "isDeleted": false,
                    "createdAt": "2020-07-07T00:39:16.155Z",
                    "updatedAt": "2020-07-07T00:39:16.155Z",
                    "dateTime": "2020-07-07T00:39:16.225Z",
                    "latitude": "3.3342",
                    "longitude": "6.63222",
                    "hostId": "5f03b27d20949c3fafcc8f21",
                    "guestId": "5f03b27d20949c3fafcc8f21"
                  }
                ]
              }
            }
          }
        },
        "operationId": "get-visitation-history",
        "description": "This is used to get a list of visitations made by the currently logged in user",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of records returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ],
        "tags": [
          "Visitations"
        ]
      },
      "parameters": []
    },
    "/factory/user/populate": {
      "post": {
        "summary": "Batch User Account Creation",
        "operationId": "post-factory-user-populate",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "Example": {
                "message": "Successfully created accounts"
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Factory"
        ],
        "description": "Use this endpoint to perform a batch account creation. This is handy for migrating user accounts.\nThis endpoint is only available to ROOT users. It requires that the file ~/api/data/profiles.json be populated with an array of user objects.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "$ref": "#/definitions/Role"
                }
              },
              "required": [
                "role"
              ]
            },
            "description": "The role object is used to assign a role to the users. This should contain a ROLE object."
          }
        ]
      }
    },
    "/factory/state/populate": {
      "post": {
        "summary": "Batch State Creation",
        "operationId": "post-factory-state-populate",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create multiple states at once. This feature is available only to ROOT users. The file ~/api/data/states.json should be populated with an array of state objects.\n\nNote: This can only be used to create states for one country at a time.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "country_id": {
                  "type": "string",
                  "description": "Id of the country which the states belong to"
                }
              },
              "required": [
                "country_id"
              ]
            }
          }
        ],
        "tags": [
          "Factory"
        ]
      }
    },
    "/region/countries": {
      "get": {
        "summary": "Manage Countries",
        "tags": [
          "Country"
        ],
        "operationId": "get-country",
        "description": "Manage country data. This route is only accessible to everyone",
        "parameters": [
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of records returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Country"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Country",
        "operationId": "post-country",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "This endpoint is used to create a new country and it is assessible only by the root admin ",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "short_name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "Country"
        ]
      },
      "parameters": []
    },
    "/region/countries/{country_id}": {
      "parameters": [
        {
          "type": "string",
          "name": "country_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Manage Country",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Country"
            }
          }
        },
        "operationId": "get-country-country_id",
        "tags": [
          "Country"
        ],
        "description": "Get country information"
      },
      "patch": {
        "summary": "Update country",
        "operationId": "patch-country-country_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Country"
        ],
        "description": "Update country",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "short_name": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/region/countries/{country_id}/states": {
      "parameters": [
        {
          "type": "string",
          "name": "country_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get all states in a country",
        "tags": [
          "Country"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/State"
              }
            }
          }
        },
        "operationId": "get-country-country_id-states",
        "description": "Returns an array of states in the specified country",
        "parameters": []
      },
      "post": {
        "summary": "Creates a new state",
        "operationId": "post-country-country_id-states",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Country"
        ],
        "description": "Adds a new state to the specified country. This Operation can be performed by only ROOT users.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "description": "",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/State"
            },
            "description": ""
          }
        ]
      }
    },
    "/hotspots": {
      "get": {
        "summary": "Get a list of hotspots",
        "tags": [
          "Hotspots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Hotspot"
              }
            }
          }
        },
        "operationId": "get-hotspots",
        "description": "This endpoint returns an array of hotspots based on the user's permission level.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of records returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ]
      },
      "post": {
        "summary": "Create Hotspot",
        "operationId": "post-hotspots",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create a new hotspot. Hotspots can only be created by users with this permission.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Hotspot"
            }
          }
        ],
        "tags": [
          "Hotspots"
        ]
      }
    },
    "/hotspots/{id}": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Gets a single hotspot",
        "tags": [
          "Hotspots"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "operationId": "get-hotspots-id",
        "description": "Returns an object of hotspot data",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Hotspot"
            },
            "description": ""
          }
        ]
      },
      "patch": {
        "summary": "Update Hotspot",
        "operationId": "patch-hotspots-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates hotspot",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Hotspot"
            }
          }
        ],
        "tags": [
          "Hotspots"
        ]
      },
      "delete": {
        "summary": "Deletes Hotspot",
        "operationId": "delete-hotspots-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes hotspot",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ],
        "tags": [
          "Hotspots"
        ]
      }
    },
    "/users/profile": {
      "get": {
        "summary": "User Profile",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "operationId": "get-users-profile",
        "description": "Profile info of the logged in user",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ]
      }
    },
    "/visitations/{id}": {
      "get": {
        "summary": "Get Visitation",
        "tags": [
          "Visitations"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Visitation"
            }
          }
        },
        "operationId": "get-visitations-:id",
        "description": "Gets single visitation by ID",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ]
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/visitations/{user_id}/history": {
      "parameters": [
        {
          "type": "string",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get visitation history by user ID",
        "operationId": "get-visitations-user_id-history",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Visitation"
              }
            }
          }
        },
        "tags": [
          "Visitations"
        ],
        "description": "Gets a list of visitations by user id",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of records returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "summary": "User Sign up from Mobile App",
        "operationId": "post-auth-signup",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "This is to be used on the mobile to create user accounts",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "dob": {
                  "type": "string"
                },
                "gender": {
                  "type": "string",
                  "description": "Gender can be either MALE or FEMALE"
                },
                "phone": {
                  "type": "string"
                },
                "stateOfResidence": {
                  "type": "string"
                },
                "organization": {
                  "type": "boolean"
                },
                "country": {
                  "type": "string",
                  "description": "Country ID of the user"
                },
                "state": {
                  "type": "string",
                  "description": "State ID of the user"
                }
              },
              "required": [
                "name",
                "email",
                "password",
                "phone",
                "stateOfResidence",
                "country",
                "state"
              ]
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/healthInfo": {
      "get": {
        "summary": "Get a list of health information",
        "tags": [
          "Health Information"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthInfo"
              }
            }
          }
        },
        "operationId": "get-healthInfo",
        "description": "This endpoint returns an array of health information based on the user's permission level.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of response returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ]
      },
      "post": {
        "summary": "Create Health Information",
        "operationId": "post-healthInfo",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Health Information"
        ],
        "description": "Create a new health information. Health information's can only be created by users with this permission.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HealthInfo"
            }
          }
        ]
      }
    },
    "/healthInfo/{id}": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get single health information",
        "tags": [
          "Health Information"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "operationId": "get-healthInfo-id",
        "description": "Returns an object of health information data",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HealthInfo"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update Health Information",
        "operationId": "patch-healthInfo-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates information",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HealthInfo"
            }
          }
        ],
        "tags": [
          "Health Information"
        ]
      },
      "delete": {
        "summary": "Deletes Health Information",
        "operationId": "delete-healthInfo-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes health information",
        "tags": [
          "Health Information"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ]
      }
    },
    "/heatlthcode": {
      "get": {
        "summary": "Get Health Codes",
        "tags": [
          "Health Codes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthCode"
              }
            }
          }
        },
        "operationId": "get-heatlthcode",
        "description": "Returns all health codes",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of response returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ]
      },
      "post": {
        "summary": "Create a new Health Code",
        "operationId": "post-heatlthcode",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Health Codes"
        ],
        "description": "Add health code. This feature is available to ROOT admin only.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HealthCode"
            }
          }
        ]
      }
    },
    "/healthcode/{id}": {
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a single health code",
        "tags": [
          "Health Codes"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCode"
            }
          }
        },
        "operationId": "get-healthcode-id",
        "description": "Get health code by id",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HealthCode"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update health code",
        "operationId": "patch-healthcode-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Health Codes"
        ],
        "description": "Modify the health code's details",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/HealthCode"
            },
            "description": ""
          }
        ]
      },
      "delete": {
        "summary": "Delete health code",
        "operationId": "delete-healthcode-id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Delete health code",
        "tags": [
          "Health Codes"
        ],
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ]
      }
    },
    "/healthInfo/{user_id}/history": {
      "parameters": [
        {
          "type": "string",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Gets a user's health information history",
        "tags": [
          "Health Information"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthInfo"
              }
            }
          }
        },
        "operationId": "get-healthInfo-user_id-history",
        "description": "This endpoint is accessible to the user in question and also admin users with permission to access such data",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ]
      }
    },
    "/tracer/{user_id}/trace": {
      "parameters": [
        {
          "type": "string",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Contact History of a user",
        "tags": [
          "Contact Tracing"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "tree": {
                  "type": "object",
                  "properties": {
                    "childNodes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Visitation"
                      }
                    },
                    "startDate": {
                      "type": "string"
                    },
                    "endDate": {
                      "type": "string"
                    },
                    "depth": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-tracer-user_id-trace",
        "description": "Returns a list of contact persons for a specific user over a period of time. This feature is available only to admin users with permission to perform such operation.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "startDate": {
                  "type": "string",
                  "description": "YYYY-MM-DD"
                },
                "endDate": {
                  "type": "string",
                  "description": "YYYY-MM-DD"
                }
              },
              "required": [
                "startDate",
                "endDate"
              ]
            }
          }
        ]
      }
    },
    "/users/search": {
      "post": {
        "summary": "Find user by email or phone",
        "operationId": "post-users-search",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        },
        "tags": [
          "User"
        ],
        "description": "find a user using their email address or phone number",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "/flagger/{user_id}/flag": {
      "parameters": [
        {
          "type": "string",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Flag a user",
        "operationId": "post-flagger-user_id-flag",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Flag"
        ],
        "description": "Flags a user and other related users who have come in contact with the user within the specified date range.",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "healthCode": {
                  "type": "string",
                  "description": "ID of the health code which should be assigned to the user"
                },
                "description": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "description": "Starting date from which possible contacts was made"
                },
                "endDate": {
                  "type": "string",
                  "description": "Final date from which possible contacts was made"
                }
              },
              "required": [
                "healthCode",
                "description",
                "startDate",
                "endDate"
              ]
            }
          }
        ]
      }
    },
    "/flagger/{user_id}/unflag": {
      "parameters": [
        {
          "type": "string",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Unflag a user",
        "operationId": "post-flagger-user_id-unflag",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Flag"
        ],
        "description": "Unflags a user who has been previously flagged",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "healthCode": {
                  "type": "string",
                  "description": "ID of the health code to be assigned to the user"
                }
              },
              "required": [
                "healthCode"
              ]
            }
          }
        ]
      }
    },
    "/notifications/broadcast": {
      "post": {
        "summary": "Send Broadcast message",
        "operationId": "post-notifications-broadcast",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Notifications"
        ],
        "description": "Use this endpoint to send broadcast messages to users on the platform. This feature allows the ROOT user alone to specify a demography of users to broadcast to. Other admin users can only send broadcasts to users within their jurisdiction. ",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "demography": {
                  "type": "object",
                  "description": "Required if ROOT admin ",
                  "properties": {
                    "country": {
                      "type": [
                        "string",
                        "array"
                      ],
                      "description": "country ID",
                      "items": {
                        "type": "string"
                      }
                    },
                    "state": {
                      "type": [
                        "string",
                        "array"
                      ],
                      "description": "state ID",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "message": {
                  "$ref": "#/definitions/Notification"
                }
              }
            }
          }
        ]
      }
    },
    "/notifications/fetch": {
      "get": {
        "summary": "Logged in user fetches notifications",
        "tags": [
          "Notifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Notification"
              }
            }
          }
        },
        "operationId": "get-broadcast-fetch",
        "description": "This endpoint returns a list of unique notifications for the logged in user",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          },
          {
            "type": "string",
            "in": "query",
            "name": "$include",
            "description": "Use this to include data from referenced docs. eg: https://ENDPOINT-URL?$include=hostId"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$limit",
            "description": "Limits the number of records returned"
          },
          {
            "type": "number",
            "in": "query",
            "name": "$page",
            "description": "Specifies which page to render when records exceeds number of returned objects"
          },
          {
            "type": "string",
            "in": "query",
            "name": "$or",
            "description": "Filters records based on $or query e.g https://ENDPOINT-URL?$or=hostId:VALUE,guestId:VALUE_2"
          }
        ]
      },
      "parameters": []
    },
    "/notifications/{message_id}/recall": {
      "parameters": [
        {
          "type": "string",
          "name": "message_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Admin recalls a  broadcast message",
        "operationId": "post-notifications-message_id-recall",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Notifications"
        ],
        "description": "Use this endpoint to recall a collection of broadcast messages with the same messageId",
        "parameters": [
          {
            "type": "string",
            "in": "header",
            "name": "Authorization",
            "required": true
          }
        ]
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "dob": {
          "type": "string",
          "format": "date"
        },
        "gender": {
          "type": "string",
          "description": "Gender should be any of these",
          "enum": [
            "male",
            "female"
          ]
        },
        "meta": {
          "type": "object",
          "description": "should contain properties that defines the user's account. Such as \n- role (object)\n- country (object)\n- state (object)"
        }
      },
      "required": [
        "email",
        "password",
        "name",
        "phone",
        "dob",
        "gender"
      ]
    },
    "Country": {
      "title": "Country",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "short_name"
      ]
    },
    "State": {
      "title": "State",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "short_name"
      ]
    },
    "Role": {
      "title": "Role",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "short_name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "short_name"
      ],
      "description": "User role"
    },
    "Visitation": {
      "title": "Visitation",
      "type": "object",
      "properties": {
        "altitude": {
          "type": "string"
        },
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        },
        "hostId": {
          "type": "string"
        },
        "guestId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "geoData": {
          "type": "object"
        },
        "dateTime": {
          "type": "string"
        }
      },
      "required": [
        "latitude",
        "longitude",
        "hostId",
        "guestId"
      ],
      "x-tags": [
        "Visitation"
      ],
      "description": "Schema for visitation model",
      "x-examples": {
        "Example": {
          "latitude": "6.6019006",
          "longitude": "3.4162416",
          "hostId": "5f03b9b429bd2211489b7317",
          "guestId": "5f03b94e23cd2441489b7312",
          "dateTime": "2020-07-07 22:30:34"
        }
      }
    },
    "Hotspot": {
      "title": "Hotspot",
      "type": "object",
      "description": "Hotspot Schema",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entity": {
          "type": "string",
          "description": "Account ID of the entity, mostly an Organization"
        },
        "threatLevel": {
          "type": "string",
          "description": "Health Code Object ID"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "isContaminated": {
          "type": "boolean",
          "description": "Default: true"
        },
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "description",
        "entity",
        "threatLevel",
        "startDate",
        "endDate",
        "latitude",
        "longitude"
      ]
    },
    "HealthCode": {
      "title": "HealthCode",
      "type": "object",
      "properties": {
        "healthCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "healthCode",
        "description"
      ]
    },
    "HealthInfo": {
      "title": "HealthInfo",
      "type": "object",
      "properties": {
        "healthCode": {
          "type": "string"
        },
        "healthStatusDescription": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "healthCode",
        "healthStatusDescription",
        "user"
      ]
    },
    "Flag": {
      "title": "Flag",
      "type": "object",
      "properties": {
        "healthInfo": {
          "type": "string",
          "description": "Object ID of related health info entry"
        },
        "user": {
          "type": "string"
        },
        "directContacts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startDate": {
          "type": "string",
          "description": "Starting date from which possible contacts was made"
        },
        "endDate": {
          "type": "string",
          "description": "Final date from which possible contacts was made"
        },
        "isFlagged": {
          "type": "object",
          "description": "default: true"
        }
      },
      "required": [
        "healthInfo",
        "user",
        "startDate",
        "endDate"
      ]
    },
    "Notification": {
      "title": "Notification",
      "type": "object",
      "properties": {
        "messageBody": {
          "type": "string"
        },
        "externalLink": {
          "type": "string"
        },
        "attachment": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "attachment file type"
            },
            "blob": {
              "type": "string"
            },
            "link": {
              "type": "string"
            }
          },
          "required": [
            "type"
          ]
        }
      }
    }
  },
  "externalDocs": {
    "description": "Covid 19 Sniffer Web Platform",
    "url": "https://covid19sniffer.com"
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json",
    "multipart/form-data",
    "application/x-www-form-urlencoded"
  ],
  "securityDefinitions": {},
  "basePath": "/api/v1"
}